3. How are arrays initialized in C++? Provide examples of both 1D and 2D arrays.
Ans. :-
-Arrays in C++ can be initialized at the time of declaration using a list of values enclosed in curly braces ({}). They can also be partially initialized, with the remaining elements set to zero by default. Here's how to initialize arrays in both one-dimensional and two-dimensional formats. Array initialization in C++ can be simple or advanced, depending on the requirements. One-dimensional arrays are used for linear data, while two-dimensional arrays are suitable for tabular or matrix data. Proper initialization ensures efficiency and avoids runtime errors.

--Example Program: Initializing a 1D Array--

#include <iostream>
using namespace std;

int main() {
    int numbers[5] = {1, 2, 3};  // Partial initialization, remaining set to 0
    for (int i = 0; i < 5; i++) {
        cout << "Element at index " << i << ": " << numbers[i] << endl;
    }
    return 0;
}


--Example Program: Initializing a 2D Array--

#include <iostream>
using namespace std;

int main() {
    int matrix[2][3] = {{1, 2, 3}, {4, 5, 6}};  // Fully initialized
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 3; j++) {
            cout << "Element at [" << i << "][" << j << "]: " << matrix[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}

